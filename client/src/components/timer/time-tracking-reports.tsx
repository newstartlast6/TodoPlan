import React, { useState, useMemo } from 'react';
import { 
  FileText, 
  Download, 
  Calendar, 
  TrendingUp, 
  Target,
  Clock,
  BarChart3,
  PieChart,
  Activity,
  Award
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { useProgressAnalytics } from '@/hooks/use-progress-analytics';
import { TimerCalculator } from '@shared/services/timer-service';
import { cn } from '@/lib/utils';

type ReportPeriod = 'week' | 'month' | 'quarter' | 'year';
type ReportType = 'summary' | 'detailed' | 'productivity' | 'comparison';

interface TimeTrackingReportsProps {
  className?: string;
}

export function TimeTrackingReports({ className }: TimeTrackingReportsProps) {
  const [reportPeriod, setReportPeriod] = useState<ReportPeriod>('month');
  const [reportType, setReportType] = useState<ReportType>('summary');
  const [selectedDate, setSelectedDate] = useState(new Date());

  const { analytics, weeklyBreakdown, historicalData } = useProgressAnalytics(
    reportPeriod === 'week' ? 7 : 
    reportPeriod === 'month' ? 30 : 
    reportPeriod === 'quarter' ? 90 : 365
  );

  // Calculate report data based on period
  const reportData = useMemo(() => {
    const now = new Date();
    const periodStart = new Date();
    
    switch (reportPeriod) {
      case 'week':
        periodStart.setDate(now.getDate() - 7);
        break;
      case 'month':
        periodStart.setMonth(now.getMonth() - 1);
        break;
      case 'quarter':
        periodStart.setMonth(now.getMonth() - 3);
        break;
      case 'year':
        periodStart.setFullYear(now.getFullYear() - 1);
        break;
    }

    const periodData = historicalData.filter(day => 
      new Date(day.date) >= periodStart && new Date(day.date) <= now
    );

    const totalTime = periodData.reduce((sum, day) => sum + day.totalSeconds, 0);
    const workingDays = periodData.filter(day => day.totalSeconds > 0).length;
    const averageDaily = workingDays > 0 ? totalTime / workingDays : 0;
    const targetHours = reportPeriod === 'week' ? 40 : 
                       reportPeriod === 'month' ? 160 : 
                       reportPeriod === 'quarter' ? 480 : 1920;
    const targetSeconds = targetHours * 3600;
    const targetAchievement = (totalTime / targetSeconds) * 100;

    return {
      periodStart,
      periodEnd: now,
      totalTime,
      workingDays,
      averageDaily,
      targetSeconds,
      targetAchievement,
      periodData,
    };
  }, [reportPeriod, historicalData]);

  const handleExportReport = () => {
    const reportContent = generateReportContent();
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `time-tracking-report-${reportPeriod}-${selectedDate.toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const generateReportContent = () => {
    const { periodStart, periodEnd, totalTime, workingDays, averageDaily, targetAchievement } = reportData;
    
    return `
TIME TRACKING REPORT
====================

Period: ${reportPeriod.toUpperCase()}
Date Range: ${periodStart.toLocaleDateString()} - ${periodEnd.toLocaleDateString()}
Generated: ${new Date().toLocaleString()}

SUMMARY
-------
Total Time Logged: ${TimerCalculator.formatDuration(totalTime)}
Working Days: ${workingDays}
Average Daily: ${TimerCalculator.formatDuration(averageDaily)}
Target Achievement: ${targetAchievement.toFixed(1)}%

ANALYTICS
---------
Consistency Score: ${analytics.consistency}%
Productivity Level: ${analytics.productivity}
Trend: ${analytics.trend.description}

BREAKDOWN BY DAY
----------------
${reportData.periodData.map(day => 
  `${day.date}: ${TimerCalculator.formatDuration(day.totalSeconds)} (${day.taskCount} tasks, ${day.sessionCount} sessions)`
).join('\n')}

---
Report generated by Time Tracker
    `.trim();
  };

  return (
    <div className={cn("space-y-6", className)}>
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Time Tracking Reports</h2>
          <p className="text-gray-600">Comprehensive analysis of your time tracking data</p>
        </div>
        
        <div className="flex items-center gap-2">
          <Select value={reportPeriod} onValueChange={(value: ReportPeriod) => setReportPeriod(value as ReportPeriod)}>
            <SelectTrigger className="w-32">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="week">Week</SelectItem>
              <SelectItem value="month">Month</SelectItem>
              <SelectItem value="quarter">Quarter</SelectItem>
              <SelectItem value="year">Year</SelectItem>
            </SelectContent>
          </Select>
          
          <Button
            variant="outline"
            size="sm"
            onClick={handleExportReport}
            className="flex items-center gap-2"
          >
            <Download className="w-4 h-4" />
            Export
          </Button>
        </div>
      </div>

      {/* Report Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Clock className="w-4 h-4 text-blue-600" />
              </div>
              <div>
                <div className="text-2xl font-bold text-blue-600">
                  {TimerCalculator.formatDuration(reportData.totalTime)}
                </div>
                <div className="text-sm text-gray-600">Total Time</div>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-green-100 rounded-lg">
                <Calendar className="w-4 h-4 text-green-600" />
              </div>
              <div>
                <div className="text-2xl font-bold text-green-600">
                  {reportData.workingDays}
                </div>
                <div className="text-sm text-gray-600">Working Days</div>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-purple-100 rounded-lg">
                <TrendingUp className="w-4 h-4 text-purple-600" />
              </div>
              <div>
                <div className="text-2xl font-bold text-purple-600">
                  {TimerCalculator.formatDuration(reportData.averageDaily)}
                </div>
                <div className="text-sm text-gray-600">Daily Average</div>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-orange-100 rounded-lg">
                <Target className="w-4 h-4 text-orange-600" />
              </div>
              <div>
                <div className="text-2xl font-bold text-orange-600">
                  {reportData.targetAchievement.toFixed(0)}%
                </div>
                <div className="text-sm text-gray-600">Target Achievement</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Report Tabs */}
      <Tabs value={reportType} onValueChange={(value: string) => setReportType(value as ReportType)}>
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="summary">Summary</TabsTrigger>
          <TabsTrigger value="detailed">Detailed</TabsTrigger>
          <TabsTrigger value="productivity">Productivity</TabsTrigger>
          <TabsTrigger value="comparison">Comparison</TabsTrigger>
        </TabsList>

        {/* Summary Report */}
        <TabsContent value="summary" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Target Progress */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Target className="w-5 h-5" />
                  Target Progress
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">Current Period</span>
                    <span className="font-medium">
                      {reportData.targetAchievement.toFixed(1)}%
                    </span>
                  </div>
                  <Progress value={Math.min(reportData.targetAchievement, 100)} className="h-3" />
                  <div className="flex justify-between text-xs text-gray-500">
                    <span>{TimerCalculator.formatDuration(reportData.totalTime)}</span>
                    <span>{TimerCalculator.formatDuration(reportData.targetSeconds)}</span>
                  </div>
                </div>
                
                {reportData.targetAchievement >= 100 ? (
                  <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                    <div className="flex items-center gap-2">
                      <Award className="w-4 h-4 text-green-600" />
                      <span className="text-sm font-medium text-green-800">
                        Target Achieved!
                      </span>
                    </div>
                    <div className="text-xs text-green-700 mt-1">
                      You've exceeded your {reportPeriod}ly target by {(reportData.targetAchievement - 100).toFixed(1)}%
                    </div>
                  </div>
                ) : (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                    <div className="text-sm font-medium text-blue-800">
                      {TimerCalculator.formatDuration(reportData.targetSeconds - reportData.totalTime)} remaining
                    </div>
                    <div className="text-xs text-blue-700 mt-1">
                      to reach your {reportPeriod}ly target
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Performance Metrics */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Activity className="w-5 h-5" />
                  Performance Metrics
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">Consistency Score</span>
                    <div className="flex items-center gap-2">
                      <Progress value={analytics.consistency} className="w-20 h-2" />
                      <span className="text-sm font-medium">{analytics.consistency}%</span>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">Productivity Level</span>
                    <Badge 
                      variant={
                        analytics.productivity === 'high' ? 'default' :
                        analytics.productivity === 'medium' ? 'secondary' : 'outline'
                      }
                      className="capitalize"
                    >
                      {analytics.productivity}
                    </Badge>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">Trend</span>
                    <div className="flex items-center gap-1">
                      {analytics.trend.direction === 'up' ? (
                        <TrendingUp className="w-3 h-3 text-green-600" />
                      ) : analytics.trend.direction === 'down' ? (
                        <TrendingUp className="w-3 h-3 text-red-600 rotate-180" />
                      ) : (
                        <div className="w-3 h-3" />
                      )}
                      <span className="text-sm">{analytics.trend.description}</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Weekly Breakdown */}
          {weeklyBreakdown.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="w-5 h-5" />
                  Weekly Breakdown
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {weeklyBreakdown.slice(0, 4).map((week, index) => (
                    <div key={index} className="space-y-2">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium">
                          Week of {week.weekStart.toLocaleDateString()}
                        </span>
                        <div className="flex items-center gap-2">
                          <Badge variant="outline" className="text-xs">
                            {week.targetHit}/{week.days.length} targets
                          </Badge>
                          <span className="font-mono text-sm">
                            {TimerCalculator.formatDuration(week.totalSeconds)}
                          </span>
                        </div>
                      </div>
                      <Progress 
                        value={(week.totalSeconds / (40 * 3600)) * 100} 
                        className="h-2"
                      />
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        {/* Detailed Report */}
        <TabsContent value="detailed" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Detailed Time Breakdown</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {reportData.periodData.slice(0, 14).map((day) => (
                  <div key={day.date} className="flex items-center justify-between p-3 border rounded-lg">
                    <div>
                      <div className="font-medium">
                        {new Date(day.date).toLocaleDateString('en-US', { 
                          weekday: 'long', 
                          month: 'short', 
                          day: 'numeric' 
                        })}
                      </div>
                      <div className="text-sm text-gray-600">
                        {day.taskCount} tasks • {day.sessionCount} sessions
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="font-mono font-medium">
                        {TimerCalculator.formatDuration(day.totalSeconds)}
                      </div>
                      <div className="text-xs text-gray-500">
                        {((day.totalSeconds / (8 * 3600)) * 100).toFixed(0)}% of target
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Productivity Report */}
        <TabsContent value="productivity" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Productivity Insights</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                    <div className="text-sm font-medium text-blue-800">
                      Peak Performance
                    </div>
                    <div className="text-xs text-blue-700 mt-1">
                      {analytics.bestDay ? 
                        `Best day: ${new Date(analytics.bestDay.date).toLocaleDateString()} with ${TimerCalculator.formatDuration(analytics.bestDay.totalSeconds)}` :
                        'No peak performance data available'
                      }
                    </div>
                  </div>
                  
                  <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                    <div className="text-sm font-medium text-green-800">
                      Consistency Rating
                    </div>
                    <div className="text-xs text-green-700 mt-1">
                      {analytics.consistency > 80 ? 'Excellent' :
                       analytics.consistency > 60 ? 'Good' :
                       analytics.consistency > 40 ? 'Fair' : 'Needs Improvement'} 
                      ({analytics.consistency}% consistent)
                    </div>
                  </div>
                  
                  <div className="bg-purple-50 border border-purple-200 rounded-lg p-3">
                    <div className="text-sm font-medium text-purple-800">
                      Work Pattern
                    </div>
                    <div className="text-xs text-purple-700 mt-1">
                      Average {TimerCalculator.formatDuration(reportData.averageDaily)} per working day
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Recommendations</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {analytics.consistency < 50 && (
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                    <div className="text-sm font-medium text-yellow-800">
                      Improve Consistency
                    </div>
                    <div className="text-xs text-yellow-700 mt-1">
                      Try to maintain more regular work hours to improve your consistency score.
                    </div>
                  </div>
                )}
                
                {reportData.targetAchievement < 80 && (
                  <div className="bg-orange-50 border border-orange-200 rounded-lg p-3">
                    <div className="text-sm font-medium text-orange-800">
                      Increase Focus Time
                    </div>
                    <div className="text-xs text-orange-700 mt-1">
                      You're {(100 - reportData.targetAchievement).toFixed(0)}% below your target. 
                      Consider longer focused work sessions.
                    </div>
                  </div>
                )}
                
                {analytics.trend.direction === 'down' && (
                  <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                    <div className="text-sm font-medium text-red-800">
                      Address Declining Trend
                    </div>
                    <div className="text-xs text-red-700 mt-1">
                      Your productivity has been declining. Review what might be affecting your focus.
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Comparison Report */}
        <TabsContent value="comparison" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Period Comparison</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8 text-gray-500">
                <BarChart3 className="w-8 h-8 mx-auto mb-2 text-gray-300" />
                <p>Comparison features coming soon</p>
                <p className="text-xs">Compare current period with previous periods</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}